from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command, Text

from tgbot.functions.holidays_days_left_func import holiday_days_left
from tgbot.functions.next_holiday_func import get_next_holiday
from tgbot.keyboards.reply import holidays_keyb
from tgbot.middlewares.lang_middleware import _, __


async def show_all_holidays(message: types.Message):
    next_holiday: dict = get_next_holiday()
    text = _("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.\n\n"
             "P.S. –°–∫–æ—Ä–æ –ø—Ä–∞–∑–¥–Ω–∏–∫ - {hol_name} üòÉ").format(hol_name=next_holiday["name"])
    await message.answer(text, reply_markup=holidays_keyb())


async def get_time_left_before_holiday(message: types.Message):
    holiday_name = message.text
    holiday_name, days_left = holiday_days_left(holiday_name)
    text = _("–î–æ {hol_name} –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π!").format(hol_name=holiday_name,
                                                                days_left=days_left)
    await message.answer(text)

all_holidays = [__("üåπ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å"), __("üå± –ù–∞–≤—Ä—É–∑")]


def register_all_holidays(dp: Dispatcher):
    dp.register_message_handler(show_all_holidays, Command("holidays") |
                                Text(contains=__("üéä –ü—Ä–∞–∑–¥–Ω–∏–∫–∏")))
    dp.register_message_handler(get_time_left_before_holiday, Text(contains=__("üåπ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å")))
