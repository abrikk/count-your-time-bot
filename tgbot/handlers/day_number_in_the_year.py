from datetime import datetime, date

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.utils.markdown import hitalic
from dateutil.parser import parse, ParserError

from tgbot.keyboards.reply import choose_dy_keyb
from tgbot.middlewares.lang_middleware import _, __


async def day_num_year(message: types.Message):
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –≤ –≥–æ–¥—É:"),
                         reply_markup=choose_dy_keyb())


async def dy_chossing(message: types.Message, state: FSMContext):
    if message.text == __("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"):
        yearday = datetime.now().timetuple().tm_yday
        await message.answer(_("–°–µ–≥–æ–¥–Ω—è {yearday} –¥–µ–Ω—å –≥–æ–¥–∞. üôá‚Äç‚ôÇ").format(yearday=yearday))
    else:
        await message.answer(_("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É."))
        await state.set_state("enter_date_dy")


async def entering_date_dy(message: types.Message, state: FSMContext):
    date_text = message.text
    try:
        parsed_date = parse(date_text, dayfirst=True)
        date_only = date(parsed_date.year, parsed_date.month, parsed_date.day)
        yearday = parsed_date.timetuple().tm_yday
        await message.answer(_("{date_only} - —ç—Ç–æ {yearday} –¥–µ–Ω—å –≥–æ–¥–∞. üôá‚Äç‚ôÇ").format(
            date_only=hitalic(date_only), yearday=yearday))
        await state.reset_state()
    except ParserError:
        await message.answer(_("–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"))


def register_day_num_year(dp: Dispatcher):
    dp.register_message_handler(day_num_year, Command("day_of_year") | Text(contains=__("üî¢ –ù–æ–º–µ—Ä –¥–Ω—è –≤ –≥–æ–¥—É")))
    dp.register_message_handler(dy_chossing, Text(contains=__("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞")) | Text(contains=__("–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞")))
    dp.register_message_handler(entering_date_dy, state="enter_date_dy")
