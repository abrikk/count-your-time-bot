from datetime import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hitalic
from dateparser import parse as dp_parse

from tgbot.functions.gettext_func import get_region_date_format
from tgbot.middlewares.lang_middleware import _, __


def choose_dy_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = [[_('–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞'), _('–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞')]]
    for text_1, text_2 in buttons:
        markup.add(KeyboardButton(text_1),
                   KeyboardButton(text_2))
    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥")))
    return markup


async def day_num_year(message: types.Message):
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –≤ –≥–æ–¥—É:"),
                         reply_markup=choose_dy_keyb())


async def dy_chossing(message: types.Message, state: FSMContext):
    if message.text == __("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞"):
        yearday = datetime.now().timetuple().tm_yday
        await message.answer(_("–°–µ–≥–æ–¥–Ω—è {yearday} –¥–µ–Ω—å –≥–æ–¥–∞. üôá‚Äç‚ôÇ").format(yearday=yearday))
    else:
        await message.answer(_("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É."))
        await state.set_state("enter_date_dy")


async def entering_date_dy(message: types.Message, state: FSMContext, db_commands):
    date_text = message.text
    try:
        user = await db_commands.get_user(user_id=message.from_user.id)
        parsed_date = dp_parse(date_text, languages=[user.lang_code],
                               settings={'DATE_ORDER': user.preferred_date_order}).date()
        yearday = parsed_date.timetuple().tm_yday
        await message.answer(_("{date_only} - —ç—Ç–æ {yearday} –¥–µ–Ω—å –≥–æ–¥–∞. üôá‚Äç‚ôÇ").format(
            date_only=hitalic(parsed_date.strftime(get_region_date_format(user.lang_code))),
            yearday=yearday))
        await state.reset_state()
    except AttributeError:
        await message.answer(_("–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"))


def register_day_num_year(dp: Dispatcher):
    dp.register_message_handler(day_num_year, Command("day_of_year") | Text(contains=__("üî¢ –ù–æ–º–µ—Ä –¥–Ω—è –≤ –≥–æ–¥—É")))
    dp.register_message_handler(dy_chossing, Text(contains=__("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞")) | Text(contains=__("–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞")))
    dp.register_message_handler(entering_date_dy, state="enter_date_dy")
