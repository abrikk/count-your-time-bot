from datetime import date

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold

from tgbot.functions.birthday_func import birthday_btn
from tgbot.functions.case_conjugation_func import day_conjugation, left_conjunction
from tgbot.functions.newyear_func import newyear_time
from tgbot.keyboards.reply import switch_to_bot
from tgbot.middlewares.lang_middleware import _, __


async def all_queries(query: types.InlineQuery, db_commands):
    # New Year
    newyear_d, newyear_h, newyear_m, newyear_s = newyear_time()
    user = await db_commands.get_user(user_id=query.from_user.id)
    # Birthday
    days_left = await birthday_btn(query.from_user.id, db_commands)
    day = day_conjugation(days_left)
    left = left_conjunction(days_left)
    await query.answer(
        results=[
            types.InlineQueryResultArticle(
                id="newyear",
                title=_("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞."),
                description=_("–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç."),
                input_message_content=types.InputTextMessageContent(
                    message_text=_("–î–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {d} –¥–Ω–µ–π, {h} —á–∞—Å–æ–≤, {m} –º–∏–Ω—É—Ç "
                                   "–∏ {s} —Å–µ–∫—É–Ω–¥! ‚òÉ").format(d=hbold(newyear_d),
                                                             h=hbold(newyear_h),
                                                             m=hbold(newyear_m),
                                                             s=hbold(newyear_s))
                ),
                reply_markup=switch_to_bot()
            ),
            types.InlineQueryResultArticle(
                id="share",
                title=_("–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left}: {days_left} {day}").format(days_left=days_left, day=day,
                                                                                   left=left),
                description=_("–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç."),
                input_message_content=types.InputTextMessageContent(
                    message_text=_("–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left} {days_left} {day} üòè").format(
                        days_left=days_left, day=day, left=left)
                ),
                reply_markup=switch_to_bot()
            )
        ],
        cache_time=10,
        is_personal=True
    )


async def newyear_query(query: types.InlineQuery):
    newyear_d, newyear_h, newyear_m, newyear_s = newyear_time()
    await query.answer(
        results=[
            types.InlineQueryResultArticle(
                id="newyear",
                title=_("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞."),
                description=_("–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç."),
                input_message_content=types.InputTextMessageContent(
                    message_text=_("–î–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {d} –¥–Ω–µ–π, {h} —á–∞—Å–æ–≤, {m} –º–∏–Ω—É—Ç "
                                   "–∏ {s} —Å–µ–∫—É–Ω–¥! ‚òÉ").format(d=hbold(newyear_d),
                                                             h=hbold(newyear_h),
                                                             m=hbold(newyear_m),
                                                             s=hbold(newyear_s))
                ),
                reply_markup=switch_to_bot()
            )
        ],
        cache_time=10
    )


async def bd_query(query: types.InlineQuery, db_commands):
    days_left = await birthday_btn(query.from_user.id, db_commands)
    day = day_conjugation(days_left)
    left = left_conjunction(days_left)
    await query.answer(
        results=[
            types.InlineQueryResultArticle(
                id="share",
                title=_("–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left}: {days_left} {day}").format(days_left=days_left, day=day,
                                                                                   left=left),
                description=_("–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç."),
                input_message_content=types.InputTextMessageContent(
                    message_text=_("–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left} {days_left} {day} üòè").format(
                        days_left=days_left, day=day, left=left)
                ),
                reply_markup=switch_to_bot()
            )
        ],
        is_personal=True
    )


def register_inline_mode(dp: Dispatcher):
    dp.register_inline_handler(bd_query, Text(contains=__("my birthday"), ignore_case=True))
    dp.register_inline_handler(newyear_query, Text(contains=__("new year"), ignore_case=True))
    dp.register_inline_handler(all_queries)
