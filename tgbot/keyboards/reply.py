from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.callback_data import CallbackData

from tgbot.middlewares.lang_middleware import _


def main_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    my_profile = _("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    markup.add(KeyboardButton(my_profile))

    buttons = [[_('üéä –£ –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ'), _('üåê –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫')],
               [_('üåÄ –ü—Ä–æ—á–µ–µ'), _('‚ùî –ü–æ–º–æ—â—å')]]

    for text_1, text_2 in buttons:
        markup.add(KeyboardButton(text_1),
                   KeyboardButton(text_2))

    # rate_button = _("üåü –û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞")
    # markup.add(KeyboardButton(rate_button))

    return markup


def additional_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = [[_('ü•≥ –ú–æ—ë –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ'), _('‚õÑÔ∏è –ù–æ–≤—ã–π –ì–æ–¥')],
               [_('üî¢ –ù–æ–º–µ—Ä –¥–Ω—è –≤ –≥–æ–¥—É'), _('‚è≥ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π')]]
    for text_1, text_2 in buttons:
        markup.add(KeyboardButton(text_1),
                   KeyboardButton(text_2))

    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
    return markup


def choose_dy_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = [[_('–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞'), _('–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞')]]
    for text_1, text_2 in buttons:
        markup.add(KeyboardButton(text_1),
                   KeyboardButton(text_2))
    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥")))
    return markup


def back_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥")))
    return markup


def cancel_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
    return markup


lang_cb = CallbackData("language", "name")

lang_keyb = InlineKeyboardMarkup(
    row_width=2,
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data=lang_cb.new(name="en")),
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=lang_cb.new(name="ru"))
        ],
        [
            InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data=lang_cb.new(name="uz")),
            InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π", callback_data=lang_cb.new(name="uk"))
        ],
        [
            InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data=lang_cb.new(name="es")),
            InlineKeyboardButton(text="üá´üá∑ Fran√ßais", callback_data=lang_cb.new(name="fr"))
        ]
    ]
)

upd_profile = CallbackData("update", "profile")


def update_profile():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ò–∑–º–µ–Ω–∏—Ç—å –ò–º—è"),
            callback_data=upd_profile.new(profile="name")
        ),
        InlineKeyboardButton(
            text=_("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
            callback_data=upd_profile.new(profile="bd")
        )
    )
    markup.add(
        InlineKeyboardButton(
            text=_("–ò–∑–º–µ–Ω–∏—Ç—å –ü–æ–ª"),
            callback_data=upd_profile.new(profile="sex")
        ),
        InlineKeyboardButton(
            text=_("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            callback_data=upd_profile.new(profile="statistics")
        )
    )

    return markup


def update_bot_info():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data="back_manual"
        ),
        InlineKeyboardButton(
            text=_("–û–±–Ω–æ–≤–∏—Ç—å"),
            callback_data="update_date_info"
        )
    )

    return markup


def share_message(action: str):
    markup = InlineKeyboardMarkup()

    markup.add(InlineKeyboardButton(
        text=_("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º"),
        switch_inline_query=action
    ))

    return markup


def switch_to_bot():
    markup = InlineKeyboardMarkup()

    markup.add(InlineKeyboardButton(
        text=_("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"),
        url="t.me/totalyclearbot"
    ))

    return markup


def switch_or_gratz():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å"),
            callback_data=bd_data.new(page="None", action="gratz")
        ),
        InlineKeyboardButton(
            text=_("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"),
            url="t.me/totalyclearbot"
        )
    )


bd_data = CallbackData("bd_people", "page", "action")


def bd_today_list(max_pages: int, page: int = 1):
    markup = InlineKeyboardMarkup()
    previous_page = page - 1
    previous_page_text = "<<"

    current_user_text = _("–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å")
    current_page_text = _("{page} –∏–∑ {max_pages}").format(page=page, max_pages=max_pages)

    next_page = page + 1
    next_page_text = ">>"

    markup.insert(
        InlineKeyboardButton(
            text=previous_page_text,
            callback_data=bd_data.new(page=previous_page, action="left")
        )
    )

    markup.insert(
        InlineKeyboardButton(
            text=current_page_text,
            callback_data=bd_data.new(page=page, action="current_page")
        )
    )

    markup.insert(
        InlineKeyboardButton(
            text=next_page_text,
            callback_data=bd_data.new(page=next_page, action="right")
        )
    )

    markup.add(
        InlineKeyboardButton(
            text=current_user_text,
            callback_data=bd_data.new(page=page, action="gratz")
        )
    )

    return markup


sex_data = CallbackData("choose", "sex", "where")


def choosing_sex(where):
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ú—É–∂—Å–∫–æ–π üë®"),
            callback_data=sex_data.new(sex="1", where=where)
        ),
        InlineKeyboardButton(
            text=_("–ñ–µ–Ω—Å–∫–∏–π üë©"),
            callback_data=sex_data.new(sex="2", where=where)
        )
    )

    return markup


manual_data = CallbackData("manual", "button")


def help_manual():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = {
        _("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"): "ability",
        _("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"): "botinfo",
        _("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"): "formats",
        _("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"): "commands",
        _("–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞"): "rate"
    }

    for text, data in buttons.items():
        markup.insert(
            InlineKeyboardButton(
                text,
                callback_data=manual_data.new(button=data),
            )
        )

    return markup


ability_data = CallbackData("instruction", "page", "action")


def help_ability(max_pages: int, page: int = 1):
    markup = InlineKeyboardMarkup()
    previous_page = page - 1
    previous_page_text = "<<"

    current_page_text = _("{page} –∏–∑ {max_pages}").format(page=page, max_pages=max_pages)

    next_page = page + 1
    next_page_text = ">>"

    markup.insert(
        InlineKeyboardButton(
            text=previous_page_text,
            callback_data=ability_data.new(page=previous_page, action="left")
        )
    )

    markup.insert(
        InlineKeyboardButton(
            text=current_page_text,
            callback_data=ability_data.new(page=page, action="current_page")
        )
    )

    markup.insert(
        InlineKeyboardButton(
            text=next_page_text,
            callback_data=ability_data.new(page=next_page, action="right")
        )
    )
    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data=ability_data.new(page="back", action="back_manual")
        )
    )

    return markup


def help_back_manual():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data="back_manual"
        )
    )

    return markup


def profile_back_manual():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data="back_profile"
        )
    )

    return markup



rate_data = CallbackData("rating", "rate")


def help_rate():
    markup = InlineKeyboardMarkup(row_width=5)
    buttons = {
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5"
    }

    for text, data in buttons.items():
        markup.insert(
            InlineKeyboardButton(
                text,
                callback_data=rate_data.new(rate=data),
            )
        )

    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data="back_manual"
        )
    )

    return markup
