from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.callback_data import CallbackData

from tgbot.middlewares.lang_middleware import _


def main_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    my_profile = _("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    markup.add(KeyboardButton(my_profile))

    buttons = [[_('üéä –£ –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ'), _('üåê –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫')],
               [_('üåÄ –ü—Ä–æ—á–µ–µ'), _('‚ùî –ü–æ–º–æ—â—å')]]

    for text_1, text_2 in buttons:
        markup.add(KeyboardButton(text_1),
                   KeyboardButton(text_2))

    return markup


def additional_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [[_('ü•≥ –ú–æ—ë –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ'), _('üéä –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ [beta]')],
               [_('üî¢ –ù–æ–º–µ—Ä –¥–Ω—è –≤ –≥–æ–¥—É'), _('‚è≥ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π')]]
    for text_1, text_2 in buttons:
        markup.add(KeyboardButton(text_1),
                   KeyboardButton(text_2))

    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
    return markup


hol_cb = CallbackData("holidays", "hol_type_name")


def holidays_keyb():
    markup = InlineKeyboardMarkup(row_width=1)
    buttons = {
        _("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"): "ih",
        _("–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è"): "todayh",
        _("smth"): "ny",
    }

    for text, data in buttons.items():
        markup.insert(
            InlineKeyboardButton(
                text=text,
                callback_data=hol_cb.new(hol_type_name=data)
            )
        )
    return markup


inter_hol_cb = CallbackData("inter_holidays", "action", "hol_uid", "page")


def inter_holidays_keyb(buttons: dict, page: int = 1):
    markup = InlineKeyboardMarkup(row_width=3)

    for text, data in buttons.items():
        markup.add(
            InlineKeyboardButton(
                text=text,
                callback_data=inter_hol_cb.new(hol_uid=data, action="show_hol", page="hol_page")
            )
        )
    markup.add(
        InlineKeyboardButton(
            text="<<",
            callback_data=inter_hol_cb.new(hol_uid="left", action="switch_page", page=page - 1)
        )
    )
    another_data = {
        _("–ù–∞–∑–∞–¥"): ("back_holiday", "back_inter", "back_hol_page"),
        ">>": ("right", "switch_page", page + 1)
    }
    for text, data in another_data.items():
        markup.insert(
            InlineKeyboardButton(
                text=text,
                callback_data=inter_hol_cb.new(hol_uid=data[0], action=data[1], page=data[2])
            )
        )
    return markup


hol_pag_cb = CallbackData("hol_pg", "page", "action")


def change_hol_keyb(page: int = 1, admin: bool = False):
    markup = InlineKeyboardMarkup()
    markup.insert(
        InlineKeyboardButton(
            text="<<",
            callback_data=hol_pag_cb.new(page=page - 1, action="left")
        )
    )

    markup.insert(
        InlineKeyboardButton(
            text=_("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"),
            callback_data=hol_pag_cb.new(page=page, action="share_message")
        )
    )

    markup.insert(
        InlineKeyboardButton(
            text=">>",
            callback_data=hol_pag_cb.new(page=page + 1, action="right")
        )
    )
    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data=hol_pag_cb.new(page=page, action="back_inter")
        )
    )
    if admin:
        markup.insert(
            InlineKeyboardButton(
                text=_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                callback_data=hol_pag_cb.new(page=page, action="settings")
            )
        )
    return markup


def back_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥")))
    return markup


def cancel_keyb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton(text=_("‚Ü™Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
    return markup


lang_cb = CallbackData("language", "name")

lang_keyb = InlineKeyboardMarkup(
    row_width=2,
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data=lang_cb.new(name="en")),
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=lang_cb.new(name="ru"))
        ],
        [
            InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data=lang_cb.new(name="uz")),
            InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π", callback_data=lang_cb.new(name="ua"))
        ],
        [
            InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data=lang_cb.new(name="es")),
            InlineKeyboardButton(text="üá´üá∑ Fran√ßais", callback_data=lang_cb.new(name="fr"))
        ]
    ]
)


def share_message(action: str):
    markup = InlineKeyboardMarkup()

    markup.add(InlineKeyboardButton(
        text=_("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º"),
        switch_inline_query=action
    ))

    return markup


def switch_to_bot():
    markup = InlineKeyboardMarkup()

    markup.add(InlineKeyboardButton(
        text=_("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"),
        url="t.me/totalyclearbot"
    ))

    return markup


switch_or_gratz_cb = CallbackData("gratz", "birthday_man_id")


def switch_or_gratz(user_bday: int):
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å"),
            callback_data=switch_or_gratz_cb.new(birthday_man_id=str(user_bday))
        ),
        InlineKeyboardButton(
            text=_("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"),
            url="t.me/totalyclearbot"
        )
    )

    return markup


def profile_back_manual():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text=_("–ù–∞–∑–∞–¥"),
            callback_data="back_profile"
        )
    )

    return markup
