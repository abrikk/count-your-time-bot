from datetime import date
from pathlib import Path
from statistics import mean
from typing import Union

import toml
from aiogram import types
from aiogram.utils.markdown import hcode, quote_html, hbold, hlink
from dateutil import relativedelta

from tgbot.functions.case_conjugation_func import day_conjugation, year_conjuction, left_conjunction, month_conjuction
from tgbot.functions.newyear_func import newyear_time
from tgbot.middlewares.lang_middleware import _


# START TEXT

def get_start_text(full_name) -> str:
    text = _("–ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n"
             "–≠—Ç–æ—Ç –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ç–≤–æ–µ–≥–æ "
             "–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.07.2006)\n\n"
             "–ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help").format(
        full_name=full_name)
    return text


def get_profile_text(user) -> str:
    user_date = user.user_bd
    today = date.today()
    age = relativedelta.relativedelta(today, user_date)
    sex = _("–ú—É–∂—Å–∫–æ–π") if user.sex == "1" else _("–ñ–µ–Ω—Å–∫–∏–π")

    text = []
    if age.years != 0:
        text.append(f"{age.years} {year_conjuction(age.years, 'word_year')}")
    if age.months != 0:
        text.append(f"{age.months} {month_conjuction(age.months, 'word_month')}")
    if age.days != 0:
        text.append(f"{age.days} {day_conjugation(age.days, 'word_day')}")

    if len(text) != 0:
        age_text = ", ".join(text)
    else:
        age_text = _("–Ø —Ä–æ–¥–∏–ª—Å—è! üëº")

    profile_text = _("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å ‚öúÔ∏è\n\n"
                     "ID: {user_id}\n"
                     "–ò–º—è: {name}\n"
                     "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_date}\n"
                     "–í–∞—à –ø–æ–ª: {sex}\n"
                     "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age_text}")

    text = profile_text.format(user_id=hcode(user.user_id),
                               name=hbold(quote_html(user.first_name)),
                               user_date=user.user_bd,
                               sex=sex,
                               age_text=age_text)

    return text


def get_echo_text() -> str:
    echo_text = _("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.\n\n"
                  "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π  –ø—Ä–æ—Ñ–∏–ª—å\n"
                  "/botinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
                  "{p}\n"
                  "/bday_today - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ {b}\n"
                  "/setname - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n"
                  "/setdate - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                  "/setsex - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª\n\n"
                  "{extra}\n"
                  "/setlanguage - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞\n"
                  "/mybd - —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                  "/newyear - —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞\n"
                  "/howmanydays - —Ä–∞–∑–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–º–∏")

    text = echo_text.format(
        p=hbold(_("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")),
        b=hbold(_("[–±–µ—Ç–∞]")),
        extra=hbold(_("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ "
                      "–∫–æ–º–∞–Ω–¥—ã")))

    return text


def get_help_text() -> list:
    text = [
        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {my_profile} üìù\n\n"
          "- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \n\"<i>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§</i>\" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É "
          "/profile, —Ç–µ–º —Å–∞–º—ã–º —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å "
          "—Ä–æ–∂–¥–µ–Ω–∏–µ, –∞ —Ç–∞–∫ –∂–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.").format(my_profile=hbold(_('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {second_ability} üöÄ\n\n"
          "- –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ–Ω –ø—Ä–∏—à–ª–µ—Ç –¢–µ–±–µ –≤—Ä–µ–º—è —Ç–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è "
          "(–Ω–∞–ø—Ä–∏–º–µ—Ä 22.07.2006).").format(
            second_ability=hbold(_('–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ '
                                   '–≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {third_ability} ‚ùì\n\n"
          "- –í—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–æ —Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ –≤—Ä—É—á–Ω—É—é "
          "—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∏ –Ω–µ —Ç–æ—á–Ω–æ. –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /mybd, –¢—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ–µ "
          "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.").format(
            third_ability=hbold(_('–£–∑–Ω–∞–π —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {fourth_ability} ‚ùÑÔ∏è\n\n"
          "- –ü–æ –∫–æ–º–∞–Ω–¥–µ /newyear –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ —Å "
          "—Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã!").format(fourth_ability=hbold(_('–£–∑–Ω–∞–π —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ '
                                                                '–ù–æ–≤–æ–≥–æ –ì–æ–¥–∞'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {fifth_ability} üìÖ\n\n"
          "- –ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ –ø–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ-—Ç–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"
          " –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /howmanydays, –∑–∞—Ç–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.").format(
            fifth_ability=hbold(_('–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ–±–æ–π –¥–∞—Ç—ã —Å '
                                  '—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º')))
    ]

    return text


def get_month_name(number) -> str:
    month_name = {
        1: _("–Ø–Ω–≤–∞—Ä—è"),
        2: _("–§–µ–≤—Ä–∞–ª—è"),
        3: _("–ú–∞—Ä—Ç–∞"),
        4: _("–ê–ø—Ä–µ–ª—è"),
        5: _("–ú–∞—è"),
        6: _("–ò—é–Ω—è"),
        7: _("–ò—é–ª—è"),
        8: _("–ê–≤–≥—É—Å—Ç–∞"),
        9: _("–°–µ–Ω—Ç—è–±—Ä—è"),
        10: _("–û–∫—Ç—è–±—Ä—è"),
        11: _("–ù–æ—è–±—Ä—è"),
        12: _("–î–µ–∫–∞–±—Ä—è"),
    }
    return month_name[number]


def get_weekday_name(number_or_date: Union[int, date]) -> str:
    weekday = {
        1: _("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
        2: _("–≤—Ç–æ—Ä–Ω–∏–∫"),
        3: _("—Å—Ä–µ–¥–∞"),
        4: _("—á–µ—Ç–≤–µ—Ä–≥"),
        5: _("–ø—è—Ç–Ω–∏—Ü–∞"),
        6: _("—Å—É–±–±–æ—Ç–∞"),
        7: _("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    }
    if isinstance(number_or_date, int):
        return weekday[number_or_date]
    elif isinstance(number_or_date, date):
        number = number_or_date.isoweekday()
        return weekday[number]


async def get_botinfo_text(call: Union[types.Message, types.CallbackQuery], db_commands, session) -> str:
    bot_user = await call.bot.me
    bot_info = await db_commands.get_bot_info(bot_user.username)
    data = toml.load(Path("pyproject.toml").absolute())
    if bot_info is None:
        bot_version: str = data["tool"]["poetry"]["VERSION"]
        num_dirs_lang = Path('C:\\Users\\abror\\PycharmProjects\\tbday-project\\locales')
        num_languages = [x for x in num_dirs_lang.iterdir() if x.is_dir()]
        await db_commands.add_bot(
            username=bot_user.username,
            version=bot_version,
            languages=len(num_languages)
        )
        await session.commit()
        bot_info = await db_commands.get_bot_info(bot_user.username)

    ratings = await db_commands.get_all_ratings()
    average_rate = round(mean(ratings), 1) if ratings else 0

    updated_date = bot_info.updated_at
    updated_month = get_month_name(updated_date.month)
    updated_day = updated_date.day
    updated_year = updated_date.year
    updated = f"{updated_day} {updated_month} {updated_year}"

    bot_version: str = data["tool"]["poetry"]["VERSION"]

    text = _("‚Ñπ –û–± —ç—Ç–æ–º {bot}:\n\n"
             "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –±–æ—Ç–∞: <b>{rate} \u2605</b>\n"
             "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {num_reviews}\n"
             "‚Ä¢ –Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π –∏ –µ—â–µ {lang}\n"
             "‚Ä¢ –ë–µ—Ç–∞-–≤–µ—Ä—Å–∏—è {version}\n"
             "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –≥–æ–¥–∞\n"
             "‚Ä¢ –í—ã–ø—É—â–µ–Ω–æ 9 –Ø–Ω–≤–∞—Ä—è 2022 –≥–æ–¥–∞\n"
             "‚Ä¢ –°–æ–∑–¥–∞–Ω–æ 25 –î–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\n\n"
             "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @JustAbrik").format(bot=hlink(_('–±–æ—Ç–µ'),
                                                              url=f't.me/{bot_user.username}'),
                                                    version=hcode(bot_version),
                                                    rate=average_rate,
                                                    num_reviews=len(ratings),
                                                    lang=bot_info.languages - 1,
                                                    updated=updated)

    return text


async def until_bd(days_left: int, age: int, where: str, message: types.Message = None, user_bd=None) -> str:
    day = day_conjugation(days_left)
    left = left_conjunction(days_left)
    turned_year = year_conjuction(age)
    if where == "btn":
        if days_left != 0:
            text = _("–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left}: {days_left} {day} üí´").format(
                days_left=days_left, day=day, left=left)
        else:
            turned_year = year_conjuction(age)
            await message.answer("üéä")
            text = (_("–£—Ä–∞! –£ –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ.\n"
                      "–í–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} {year} ü•≥").format(age=age, year=turned_year))
        return text
    elif where == "btn_born_today":
        await message.answer("üéä")
        text = (_("–£—Ö —Ç—ã! –°–µ–≥–æ–¥–Ω—è –í—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞ —Å–≤–µ—Ç! üë∂ü•≥"))
        return text
    elif where == "cmnd":
        if days_left != 0:
            text = _("–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left}: {days_left} {day} üí´").format(
                days_left=days_left, day=day, left=left)
        else:
            await message.answer("üéä")
            text = (_("–£—Ä–∞! –£ –∫–æ–≥–æ-—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ.\n"
                      "–¢–µ–±–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} {year} ü•≥").format(age=age, year=turned_year))
        return text
    elif where == "title":
        if days_left != 0:
            text = _("–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left}: {days_left} {day}").format(
                days_left=days_left, day=day, left=left)
        else:
            if user_bd == date.today():
                text = _("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–µ–≥–æ–¥–Ω—è —Ä–æ–¥–∏–ª—Å—å!")
            else:
                text = _("–£ –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ. –í–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} {year}.").format(
                    age=age, year=turned_year)
        return text
    elif where == "inline_text":
        if days_left != 0:
            text = _("–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left} {days_left} {day} üòè").format(
                days_left=days_left, day=day, left=left)
        else:
            if user_bd == date.today():
                text = _("–Ø —Å–µ–≥–æ–¥–Ω—è —Ä–æ–¥–∏–ª—Å—è!!! ü•≥ü•≥")
            else:
                text = _("–ú–Ω–µ —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} {year}!!! ü•≥ü•≥").format(age=age,
                                                                                year=turned_year)
        return text


def get_newyear_time() -> str:
    days_left, hours_left, minutes_left, seconds_left = newyear_time()

    text = _("–î–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {d} –¥–Ω–µ–π, {h} "
             "—á–∞—Å–æ–≤, {m} –º–∏–Ω—É—Ç –∏ {s} —Å–µ–∫—É–Ω–¥! ‚òÉ").format(
        d=hbold(days_left),
        h=hbold(hours_left),
        m=hbold(minutes_left),
        s=hbold(seconds_left))

    return text


async def get_profile_stat_text(user_id, db_commands) -> str:
    user = await db_commands.get_user(user_id)
    created_at = user.created_at.strftime("%Y-%m-%d %H:%M:%S")
    user_received_gratzed = await db_commands.get_user_rcvd_gratzed(user_id)
    user_gratzed = await db_commands.get_user_gratzed(user_id)

    gratzed_text = "".join("- –í {year[1]} –≥–æ–¥—É: {year[0]}\n".format(year=year)
                           for year in user_gratzed)

    rcvd_gratz_text = "".join("- –í {year[1]} –≥–æ–¥—É: {year[0]}\n".format(year=year)
                              for year in user_received_gratzed)

    # The number of congratulations sent by the user in a given year
    gratzed = gratzed_text if len(user_gratzed) != 0 else "<i>- –ü—É—Å—Ç–æ</i>"
    # The number of congratulations that the user received in a certain year
    rcvd_gratz = rcvd_gratz_text if len(user_received_gratzed) != 0 else "<i>- –ü—É—Å—Ç–æ</i>"

    stat_text = ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                 "üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π</b>:\n"
                 "{gratzed}\n\n"
                 "üì• <b>–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π:</b>\n"
                 "{rcvd_gratz}\n\n"
                 "üìù –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}UTC+0").format(gratzed=gratzed,
                                                                  rcvd_gratz=rcvd_gratz,
                                                                  created_at=created_at)

    return stat_text


def get_available_formats_text(is_day_first: bool) -> str:
    if is_day_first:
        text = _("–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ "
                 "—Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã ISO 8601.\n\n"
                 "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                 "–§–æ—Ä–º–∞—Ç - –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã \"28 –∏—é–Ω—è 2018 –≥–æ–¥–∞\"\n"
                 "- –≥–≥–≥–≥.–¥–¥.–º–º ‚Üí 2018.28.06\n"
                 "- –¥.–º.–≥–≥–≥–≥ ‚Üí 28.6.2018\n"
                 "- –¥-–º-–≥–≥–≥–≥ ‚Üí 28-6-2018\n"
                 "- –¥/–º/–≥–≥–≥–≥ ‚Üí  28/6/2018\n"
                 "- –¥–¥.–º–º.–≥–≥–≥–≥ ‚Üí 28.06.2018\n"
                 "- –¥–¥-–º–º-–≥–≥–≥–≥ ‚Üí 28-06-2018\n"
                 "- –¥–¥/–º–º/–≥–≥–≥–≥ ‚Üí 28/06/2018\n"
                 "ISO 8601:\n"
                 "- –≥–≥–≥–≥–¥–¥–º–º ‚Üí 20182806"
                 )

        # text = _("–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ "
        #          "—Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã ISO 8601.\n\n"
        #          "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        #          "- –≥–≥–≥–≥.–º–º.–¥–¥ ‚Üí 2018.06.28\n"
        #          "- –≥–≥–≥–≥-–º–º-–¥–¥ ‚Üí 2018-06-28\n"
        #          "- –≥–≥–≥–≥/–º–º/–¥–¥ ‚Üí 2018/06/28\n"
        #          "- –≥–≥–≥–≥-–º-–¥ ‚Üí 2018-6-28\n"
        #          "- –≥–≥–≥–≥/–º/–¥ ‚Üí 2018/6/28\n"
        #          # "- –≥–≥–≥–≥.–¥–¥.–º–º ‚Üí 2018.28.06\n"
        #          # "- –¥.–º.–≥–≥–≥–≥ ‚Üí 22.6.2018\n"
        #          # "- –¥-–º-–≥–≥–≥–≥ ‚Üí 22-6-2018\n"
        #          # "- –¥/–º/–≥–≥–≥–≥ ‚Üí  22/6/2018\n"
        #          # "- –¥–¥.–º–º.–≥–≥–≥–≥ ‚Üí 28.06.2018\n"
        #          # "- –¥–¥-–º–º-–≥–≥–≥–≥ ‚Üí 28-06-2018\n"
        #          # "- –¥–¥/–º–º/–≥–≥–≥–≥ ‚Üí 28/06/2018\n"
        #          "- –º/–¥/–≥–≥–≥–≥ ‚Üí 28/6/2018\n"
        #          "ISO 8601:\n\n"
        #          "")
    else:
        text = _("–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ "
                 "—Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã ISO 8601.\n\n"
                 "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                 "–§–æ—Ä–º–∞—Ç - –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã \"28 –∏—é–Ω—è 2018 –≥–æ–¥–∞\"\n"
                 "- –≥–≥–≥–≥.–º–º.–¥–¥ ‚Üí 2018.06.28\n"
                 "- –≥–≥–≥–≥-–º–º-–¥–¥ ‚Üí 2018-06-28\n"
                 "- –≥–≥–≥–≥/–º–º/–¥–¥ ‚Üí 2018/06/28\n"
                 "- –≥–≥–≥–≥-–º-–¥ ‚Üí 2018-6-28\n"
                 "- –≥–≥–≥–≥/–º/–¥ ‚Üí 2018/6/28\n"
                 "- –º/–¥/–≥–≥–≥–≥ ‚Üí 28/6/2018\n")
    return text


async def get_user_turned_day_text(user_id: int, db_commands) -> str:
    user = await db_commands.get_user(user_id)

    today = date.today()
    days = (today - user.user_bd).days

    text = _("–°–µ–≥–æ–¥–Ω—è –í–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å: \n\n"
             "{days} –¥–Ω–µ–π\n"
             "–∏–ª–∏\n"
             "{hours} —á–∞—Å–æ–≤").format(days=days, hours=days * 24)
    return text
