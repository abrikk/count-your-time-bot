from datetime import date
from statistics import mean
from typing import Union

from aiogram import types
from aiogram.utils.markdown import hcode, quote_html, hbold, hlink
from dateutil import relativedelta

from tgbot.functions.case_conjugation_func import day_conjugation, year_conjuction, left_conjunction
from tgbot.middlewares.lang_middleware import _


def get_profile_text(user) -> str:
    user_date = user.user_bd
    today = date.today()
    age = relativedelta.relativedelta(today, user_date)
    sex = _("–ú—É–∂—Å–∫–æ–π") if user.sex == "1" else _("–ñ–µ–Ω—Å–∫–∏–π")

    profile_text = _("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å ‚öúÔ∏è\n\n"
                     "ID: {user_id}\n"
                     "–ò–º—è: {name}\n"
                     "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_date}\n"
                     "–í–∞—à –ø–æ–ª: {sex}\n"
                     "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {years} –ª–µ—Ç {months} –º–µ—Å—è—Ü–µ–≤ {days} –¥–Ω–µ–π")

    text = profile_text.format(user_id=hcode(user.user_id),
                               name=hbold(quote_html(user.first_name)),
                               user_date=user.user_bd,
                               sex=sex,
                               years=hbold(age.years),
                               months=hbold(age.months),
                               days=hbold(age.days))

    return text


def get_echo_text() -> str:
    echo_text = _("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.\n\n"
                  "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π  –ø—Ä–æ—Ñ–∏–ª—å\n"
                  "/botinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
                  "{p}\n"
                  "/bday_today - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ {b}\n"
                  "/setname - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n"
                  "/setdate - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                  "/setsex - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª\n\n"
                  "{extra}\n"
                  "/setlanguage - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞\n"
                  "/mybd - —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                  "/newyear - —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞\n"
                  "/howmanydays - —Ä–∞–∑–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–º–∏")

    text = echo_text.format(
        p=hbold(_("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")),
        b=hbold(_("[–±–µ—Ç–∞]")),
        extra=hbold(_("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ "
                      "–∫–æ–º–∞–Ω–¥—ã")))

    return text


def get_help_text() -> list:
    text = [
        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {my_profile} üìù\n\n"
          "- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \n\"<i>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§</i>\" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É "
          "/profile, —Ç–µ–º —Å–∞–º—ã–º —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å "
          "—Ä–æ–∂–¥–µ–Ω–∏–µ, –∞ —Ç–∞–∫ –∂–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.").format(my_profile=hbold(_('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {second_ability} üöÄ\n\n"
          "- –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ–Ω –ø—Ä–∏—à–ª–µ—Ç –¢–µ–±–µ –≤—Ä–µ–º—è —Ç–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è "
          "(–Ω–∞–ø—Ä–∏–º–µ—Ä 22.07.2006).").format(
            second_ability=hbold(_('–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ '
                                   '–≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {third_ability} ‚ùì\n\n"
          "- –í—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–æ —Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ –≤—Ä—É—á–Ω—É—é "
          "—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∏ –Ω–µ —Ç–æ—á–Ω–æ. –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /mybd, –¢—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ–µ "
          "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.").format(
            third_ability=hbold(_('–£–∑–Ω–∞–π —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {fourth_ability} ‚ùÑÔ∏è\n\n"
          "- –ü–æ –∫–æ–º–∞–Ω–¥–µ /newyear –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ —Å "
          "—Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã!").format(fourth_ability=hbold(_('–£–∑–Ω–∞–π —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ '
                                                                '–ù–æ–≤–æ–≥–æ –ì–æ–¥–∞'))),

        _("ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
          "‚Ä¢ {fifth_ability} üìÖ\n\n"
          "- –ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ –ø–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ-—Ç–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"
          " –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /howmanydays, –∑–∞—Ç–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.").format(
            fifth_ability=hbold(_('–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ–±–æ–π –¥–∞—Ç—ã —Å '
                                  '—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º')))
    ]

    return text


def get_month_name(number) -> str:
    if number == 1:
        return _("–Ø–Ω–≤–∞—Ä—è")
    elif number == 2:
        return _("–§–µ–≤—Ä–∞–ª—è")
    elif number == 3:
        return _("–ú–∞—Ä—Ç–∞")
    elif number == 4:
        return _("–ê–ø—Ä–µ–ª—è")
    elif number == 5:
        return _("–ú–∞—è")
    elif number == 6:
        return _("–ò—é–Ω—è")
    elif number == 7:
        return _("–ò—é–ª—è")
    elif number == 8:
        return _("–ê–≤–≥—É—Å—Ç–∞")
    elif number == 9:
        return _("–°–µ–Ω—Ç—è–±—Ä—è")
    elif number == 10:
        return _("–û–∫—Ç—è–±—Ä—è")
    elif number == 11:
        return _("–ù–æ—è–±—Ä—è")
    elif number == 12:
        return _("–î–µ–∫–∞–±—Ä—è")


def get_weekday_name(number_or_date: Union[int, date]) -> str:
    if isinstance(number_or_date, int):
        number = number_or_date
    elif isinstance(number_or_date, date):
        number = number_or_date.isoweekday()

    if number == 1:
        return _("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
    elif number == 2:
        return _("–≤—Ç–æ—Ä–Ω–∏–∫")
    elif number == 3:
        return _("—Å—Ä–µ–¥–∞")
    elif number == 4:
        return _("—á–µ—Ç–≤–µ—Ä–≥")
    elif number == 5:
        return _("–ø—è—Ç–Ω–∏—Ü–∞")
    elif number == 6:
        return _("—Å—É–±–±–æ—Ç–∞")
    elif number == 7:
        return _("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")


async def get_botinfo_text(message: types, db_commands) -> str:
    ratings = await db_commands.get_all_ratings()
    average_rate = round(mean(ratings), 1) if ratings else 0

    bot_user = await message.bot.me
    bot_info = await db_commands.get_bot_info(bot_user.username)

    updated_date = bot_info.updated_on
    updated_month = get_month_name(updated_date.month)
    updated_day = updated_date.day
    updated_year = updated_date.year
    updated = f"{updated_day} {updated_month} {updated_year}"

    text = _("‚Ñπ –û–± —ç—Ç–æ–º {bot}:\n\n"
             "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –±–æ—Ç–∞: <b>{rate} \u2605</b>\n"
             "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {num_reviews}\n"
             "‚Ä¢ –Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π –∏ –µ—â–µ {lang}\n"
             "‚Ä¢ –ë–µ—Ç–∞-–≤–µ—Ä—Å–∏—è {version}\n"
             "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –≥–æ–¥–∞\n"
             "‚Ä¢ –í—ã–ø—É—â–µ–Ω–æ 9 –Ø–Ω–≤–∞—Ä—è 2022 –≥–æ–¥–∞\n"
             "‚Ä¢ –°–æ–∑–¥–∞–Ω–æ 25 –î–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\n\n"
             "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @JustAbrik").format(bot=hlink(_('–±–æ—Ç–µ'), url=f't.me/{bot_user.username}'),
                                                    version=hcode(bot_info.version),
                                                    rate=average_rate,
                                                    num_reviews=len(ratings),
                                                    lang=bot_info.languages,
                                                    updated=updated)

    return text


def until_bd(message: types.Message, days_left: int, age: int) -> str:
    day = day_conjugation(days_left)
    left = left_conjunction(days_left)
    if days_left != 0:
        text = _("–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {left}: {days_left} {day} üí´").format(
            days_left=days_left, day=day, left=left)
    else:
        turned_year = year_conjuction(age)
        message.answer("üéä")
        text = (_("–£—Ä–∞! –£ –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ.\n"
                  "–í–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} {year} ü•≥").format(age=age, year=turned_year))
    return text
